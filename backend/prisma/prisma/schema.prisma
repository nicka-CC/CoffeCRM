// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = "postgres://neondb_owner:npg_4p5RYihEZesm@ep-raspy-silence-a10u9qpl-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
  url      = "postgresql://postgres:nikita12345@localhost:5432/CoffeCRM?schema=public"
}

// ---------- Основные типы ----------
enum Role {
  ADMIN
  MANAGER
  BARISTA
  ACCOUNTANT
  CUSTOMER
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  READY
  COMPLETED
  CANCELED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum TransactionType {
  INCOME
  EXPENSE
  WRITE_OFF
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  role      Role     @default(CUSTOMER)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // связи
  employee Employee?
  customer Customer?
}

model Employee {
  id       String   @id @default(uuid())
  userId   String   @unique
  position String
  salary   Float?
  hiredAt  DateTime @default(now())
  kpis     Kpi[]

  user     User    @relation(fields: [userId], references: [id])
  branch   Branch? @relation(fields: [branchId], references: [id])
  branchId String?
}

model Kpi {
  id         String   @id @default(uuid())
  employeeId String
  metric     String
  value      Float
  date       DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Branch {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  createdAt DateTime @default(now())

  employees Employee[]
  stocks    Stock[]
  orders    Order[]
  bookings  Booking[]
}

model Product {
  id         String   @id @default(uuid())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  price      Float
  isActive   Boolean  @default(true)

  stocks     Stock[]
  orderItems OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Stock {
  id        String @id @default(uuid())
  branchId  String
  productId String
  quantity  Int    @default(0)

  branch       Branch             @relation(fields: [branchId], references: [id])
  product      Product            @relation(fields: [productId], references: [id])
  transactions StockTransaction[]
}

model StockTransaction {
  id       String          @id @default(uuid())
  stockId  String
  type     TransactionType
  quantity Int
  date     DateTime        @default(now())

  stock Stock @relation(fields: [stockId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  branchId   String
  customerId String?
  status     OrderStatus @default(NEW)
  total      Float
  createdAt  DateTime    @default(now())

  branch   Branch      @relation(fields: [branchId], references: [id])
  customer Customer?   @relation(fields: [customerId], references: [id])
  items    OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Customer {
  id       String    @id @default(uuid())
  userId   String    @unique
  bonus    Int       @default(0)
  orders   Order[]
  bookings Booking[]

  user User @relation(fields: [userId], references: [id])
}

model Booking {
  id         String        @id @default(uuid())
  branchId   String
  customerId String
  date       DateTime
  timeFrom   DateTime
  timeTo     DateTime
  type       String
  status     BookingStatus @default(PENDING)

  branch   Branch   @relation(fields: [branchId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
}

model Report {
  id        String   @id @default(uuid())
  type      String
  period    String
  fileUrl   String
  createdAt DateTime @default(now())
}

model Company {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  PaymentSettings PaymentSettings[]

  Integration Integration[]
}

model PaymentSettings {
  id        String  @id @default(uuid())
  provider  String
  apiKey    String
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])
}

model Integration {
  id        String  @id @default(uuid())
  name      String
  apiKey    String?
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
}
